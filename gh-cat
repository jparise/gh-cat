#!/usr/bin/env bash
set -euo pipefail

version() {
  echo "gh-cat v1.1.0"
  exit
}

usage() {
  cat <<EOF
Usage: gh cat repo path ...

Concatenate and print the contents of files in a GitHub repo

Arguments:
    repo            like: username/repo
    path            file path within the repo

Options:
    -b, --branch    branch or tag name
    -c, --cmd       cat-style output command
    -h, --help      print usage
    -v, --version   print version
    -V, --verbose   enable debug output

Dependencies: curl

Examples:
    gh cat jparise/gh-cat README.md
    gh cat jparise/gh-cat README.md LICENSE > file
    gh cat jparise/gh-cat -c "bat --number" README.md
    gh cat cli/cli -b trunk README.md
EOF
  exit
}

repo=""
branch=""
paths=()

for cmd in batcat bat cat; do
  if type -p "$cmd" >/dev/null; then
    break
  fi
done

while [[ $# -gt 0 ]]; do
  case "$1" in
    -h | --help)
      usage
      ;;
    -v | --version)
      version
      ;;
    -V | --verbose)
      set -x
      shift
      ;;
    -b | --branch)
      branch="$2"
      shift 2
      ;;
    -c | --cmd)
      cmd="$2"
      shift 2
      ;;
    *)
      if [[ ! $repo ]]; then
        repo="$1"
      else
        paths+=("$1")
      fi
      shift
      ;;
  esac
done

if [[ ! $repo || ${#paths[@]} == 0 ]]; then
  usage
fi

for bin in curl gh; do
  if ! type -p "$bin" >/dev/null; then
    echo "error: $bin not found on the system" >&2
    exit 1
  fi
done
unset "$bin"

if [[ ! $repo =~ .*/.* ]]; then
  user="$(gh config get -h github.com user)"
  repo="$user/$repo"
fi

if [[ ! $branch ]]; then
  branch=$(gh api "repos/$repo" --jq '.default_branch')
fi

token=$(gh auth token)
readonly token

_cat() {
  if [[ $cmd == bat* ]]; then
    $cmd --file-name "$1"
  else
    $cmd
  fi
}

for path in "${paths[@]}"; do
  curl -fsL --oauth2-bearer "$token" \
    "https://raw.githubusercontent.com/$repo/$branch/$path" | _cat "$path" ||
    (echo "$repo: $path: not found or unavailable" >&2; exit 1)
done
